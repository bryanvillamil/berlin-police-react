import { useState, useMemo } from "react";
import Head from "next/head";
import { SubmitHandler } from "react-hook-form";
import { LayoutBikes, Header, FormSearch, BoxBike, Pagination, NotFound, Loading } from "@components";
import { useBikes } from "@services";
import { locationEnum, FormFields } from "@types";
import { WrapperBikesInfo } from "../styles/styled";

const Home = () => {
  const [page, setPage] = useState(0);
  const [dataFilters, setDataFilters] = useState<Partial<FormFields>>({
    search: "",
    location: locationEnum.berlin
  });

  const { data, isLoading, error } = useBikes({
    query: dataFilters.search,
    location: dataFilters.location,
    stolenness: 'proximity',
    distance: 10,
    page,
    per_page: 10,
  });

  const bikes = data?.pages[0].bikes;

  const memoriesDataBikes = useMemo(() => {
    
    if (!bikes) {
      return [];
    }

    if (dataFilters && dataFilters.dateFrom && dataFilters.dateTo) {
      const startDate = new Date(dataFilters.dateFrom);
      const endDate = new Date(dataFilters.dateTo);

      return bikes.filter((bike) => {
        const startParse = startDate.getTime() / 1000;
        const endParse = endDate.getTime() / 1000;

        return (
          bike.date_stolen <= endParse &&
          bike.date_stolen >= startParse
        );
      });
    }

    return bikes;
  }, [bikes, dataFilters]);

  const onSubmit: SubmitHandler<FormFields> = (dataRes) => {
    setDataFilters(dataRes);
    setPage(0)
  };

  if (error) return "Ha ocurrido un Error!!!";

  return (
    <>
      <Head>
        <title>Stolen Bikes</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header city={dataFilters?.location} />

      <LayoutBikes>
        <FormSearch onSubmit={onSubmit} />

        {/* {!isLoading && <h2>Total: {data?.pages.}</h2>} */}

        <WrapperBikesInfo>
          {isLoading
            ? <Loading />
            : memoriesDataBikes.length == 0 ? (
              <NotFound />
            ) : 
              memoriesDataBikes.map((bike) => {
                const titleFull = 
                  `${bike.title} ${bike.frame_colors && `(${bike.frame_colors.join()})`}`;
                return (
                  <BoxBike
                    key={bike.id}
                    description={bike.description ? bike.description : ""}
                    title={titleFull}
                    large_img={bike.large_img}
                    stolen_location={bike.stolen_location}
                    date_stolen={bike.date_stolen}
                  />
                );
              }
            )
          }
        </WrapperBikesInfo>

        <Pagination 
          page={page} 
          setPage={setPage} 
          disabled={memoriesDataBikes.length == 0}
        />
      </LayoutBikes>
    </>
  );
};

export default Home;