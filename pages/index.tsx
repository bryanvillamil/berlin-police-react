import { useMemo, useState } from "react";
import Head from "next/head";
import { useQuery } from "react-query";
import { useForm, Controller, SubmitHandler } from "react-hook-form";
import { LayoutBikes, Header, FormSearch, BoxBike } from "@components";
import { useBikes } from "@services";
import { BikeInfo } from "@types";
import { WrapperBikesInfo } from "../styles/styled";

type FormFields = {
  search: string;
  dateFrom: Date;
  dateTo: Date;
};

const Home = () => {
  const [page, setPage] = useState(0);
  const [dataFilters, setDataFilters] = useState<Partial<FormFields>>({
    search: "",
  });

  const { data, isLoading, error } = useBikes({
    query: dataFilters.search,
    location: "52°31′00″N,13°23′00", // Berlin
    page,
    per_page: 10,
  });

  console.log(data);

  const bikes = data?.pages[0].bikes;

  const memoriesDataBikes = useMemo(() => {
    if (!bikes) {
      return [];
    }

    if (dataFilters && dataFilters.dateFrom && dataFilters.dateTo) {
      const startDate = new Date(dataFilters.dateFrom);
      const endDate = new Date(dataFilters.dateTo);

      return bikes.filter((bike) => {
        return (
          bike.date_stolen <= endDate.getTime() / 1000 &&
          bike.date_stolen >= startDate.getTime() / 1000
        );
      });
    }
    return bikes;
  }, [bikes, dataFilters]);

  const onSubmit: SubmitHandler<FormFields> = (dataRes) => {
    console.log(dataRes);
    setDataFilters(dataRes);
  };

  if (error) return "Ha ocurrido un Error!!!";

  console.log("memoriesDataBikes", memoriesDataBikes);

  return (
    <>
      <Head>
        <title>Stolen Bikes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />

      <LayoutBikes>
        <FormSearch onSubmit={onSubmit} />

        {/* {!isLoading && <h2>Total: {data?.pages.}</h2>} */}

        <WrapperBikesInfo>
          {isLoading
            ? "...Loading..."
            : memoriesDataBikes.map((bike) => {
                return (
                  <BoxBike
                    key={bike.id}
                    description={bike.description ? bike.description : ""}
                    title={bike.title}
                    large_img={bike.large_img}
                  />
                );
              })}
        </WrapperBikesInfo>

        <button onClick={() => setPage((prev) => prev + 1)}>next</button>
        <button onClick={() => setPage((prev) => prev - 1)}>prec</button>
      </LayoutBikes>
    </>
  );
};

export default Home;
